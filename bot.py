import os
import logging
import datetime
import json
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, CommandHandler, filters
from dotenv import load_dotenv
from rag_engine import find_similar_chunks
import requests

# Load environment variables
load_dotenv()
TELEGRAM_API_KEY = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# System prompt for Nikolife assistant
SYSTEM_PROMPT = """–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, —É–º–Ω—ã–π –∏ —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã Nikolife. 
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é, —Å–Ω–∏–∂–µ–Ω–∏—é –≤–µ—Å–∞, –ø–∏—Ç–∞–Ω–∏—é, –≥–æ—Ä–º–æ–Ω–∞–º –∏ –ë–ê–î–∞–º.

üí° –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã:
1Ô∏è‚É£ –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤—ã–¥–∞–π –ø–æ–ª–Ω—ã–π, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã.
2Ô∏è‚É£ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —Ç–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, –¥–æ–∑–∏—Ä–æ–≤–∫–∏, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã, –º–µ—Ö–∞–Ω–∏–∑–º—ã –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "150 –º–∏–Ω—É—Ç —É–º–µ—Ä–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–¥–µ–ª—é", "25‚Äì30 –≥ –∫–ª–µ—Ç—á–∞—Ç–∫–∏ –≤ –¥–µ–Ω—å").
3Ô∏è‚É£ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ –ø—É–Ω–∫—Ç–∞–º, –¥–æ–±–∞–≤–ª—è–π –ø–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –∑–Ω–∞–ª, —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–≥–æ–¥–Ω—è.
4Ô∏è‚É£ –ë—É–¥—å —Ç—ë–ø–ª—ã–º, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º üíñ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —É–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª –∂–∏–≤—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º.
5Ô∏è‚É£ –ï—Å–ª–∏ —Ä–µ—á—å –æ –ë–ê–î–∞—Ö –∏–ª–∏ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö ‚Äî —É–∫–∞–∂–∏ –¥–æ–∑–∏—Ä–æ–≤–∫—É, –ø–æ–ª—å–∑—É, —Ä–∏—Å–∫–∏ –∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è.
6Ô∏è‚É£ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–≤—å –¥–∏–∞–≥–Ω–æ–∑ –∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–∞–π –ª–µ—á–µ–Ω–∏–µ ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ –ø—Ä–∏ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.

üìå –§–æ—Ä–º–∞—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ:
–ù–∞—á–Ω–∏ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: "üåø –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–º—å—é Nikolife!"
–î–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π, –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π —É–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ (7-10).

üöÄ –ï—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
–°–∫–∞–∂–∏: "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É‚Ä¶ –Ω–æ —è ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∏ –≤–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å!"
–î–∞–π —è—Ä–∫–∏–π, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π, –ø–æ–ª–µ–∑–Ω—ã–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è –æ—Ç–≤–µ—Ç –≤ –∫—Ä—É—Ç–æ–º, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ —Å —ç–º–æ–¥–∑–∏ –∏ –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º.

‚ú® –¢–≤–æ—è —Ü–µ–ª—å:
–í–¥–æ—Ö–Ω–æ–≤–∏—Ç—å, –æ–±—É—á–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏ –¥–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É —á—ë—Ç–∫–∏–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π, –∞ –Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã.
"""

# Logging
logging.basicConfig(level=logging.INFO)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤: user_id -> —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
user_conversations = {}

# YandexGPT call with conversation history
def ask_yandex_gpt(user_id, user_prompt, context_chunks=None):
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_conversations:
        user_conversations[user_id] = []

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã ‚Äî –¥–æ–±–∞–≤–∏–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    if context_chunks:
        context_text = "\n".join(context_chunks)
        user_conversations[user_id].append({"role": "system", "text": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n{context_text}"})

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_conversations[user_id].append({"role": "user", "text": user_prompt})

    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Ç–æ–∫–µ–Ω—ã
    recent_history = user_conversations[user_id][-10:]

    payload = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.5,
            "maxTokens": 800
        },
        "messages": [{"role": "system", "text": SYSTEM_PROMPT}] + recent_history
    }

    response = requests.post(url, headers=headers, json=payload)
    result = response.json()
    bot_reply = result["result"]["alternatives"][0]["message"]["text"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_conversations[user_id].append({"role": "assistant", "text": bot_reply})

    return bot_reply

# Message handler
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    matched_chunks = find_similar_chunks(user_input, k=5)
    used_knowledge_base = bool(matched_chunks)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT
    response = ask_yandex_gpt(user_id, user_input, matched_chunks if used_knowledge_base else None)

    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã
    if used_knowledge_base:
        response = "‚ÑπÔ∏è –û—Ç–≤–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n" + response

    # –õ–æ–≥–∏—Ä—É–µ–º
    log = {
        "time": str(datetime.datetime.now()),
        "user_id": user_id,
        "question": user_input,
        "response": response
    }
    with open("logs.jsonl", "a", encoding="utf-8") as f:
        f.write(json.dumps(log, ensure_ascii=False) + "\n")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await context.bot.send_message(chat_id=chat_id, text=response)

# Start command ‚Äî —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üåø *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Nikolife AI Assistant!* üíñ\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π —É–º–Ω—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é, –ø–∏—Ç–∞–Ω–∏—é –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é. "
        "–í–º–µ—Å—Ç–µ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ, —Å–∏–ª—å–Ω–µ–µ –∏ —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ üåû\n\n"
        "üìå –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è —Ç–µ–±—è —Å–¥–µ–ª–∞—Ç—å:\n"
        "‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é ü•ó\n"
        "‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Å–æ–Ω –∏ —ç–Ω–µ—Ä–≥–∏—é üò¥‚ö°\n"
        "‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∫–∏ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –ë–ê–î–æ–≤ üíä\n"
        "‚Ä¢ –î–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –∏ –º—ã –Ω–∞—á–Ω—ë–º!\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä_: '–ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–∏—Ç–∞–º–∏–Ω–∞ D?' –∏–ª–∏ '–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞'.\n\n"
        "üöÄ –ì–æ—Ç–æ–≤? –¢–æ–≥–¥–∞ –ø–æ–µ—Ö–∞–ª–∏!"
    )
    await update.message.reply_text(welcome_text, parse_mode="Markdown")

# Run bot
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_API_KEY).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ Bot is running...")
    app.run_polling()

